fastlane_version "1.100.0"
REQUIRED_XCODE_VERSION = "12.0"
default_platform :ios

PROJECT_NAME = "WSPopup"

platform :ios do
  lane :get_shared_version_number do |options|
    version_number = ""
    project = Xcodeproj::Project.open("../#{PROJECT_NAME}.xcodeproj")
    project.build_configurations.each do |build|
        version_number = build.build_settings['MARKETING_VERSION']
    end
    version_number
  end

  lane :get_shared_build_number do |options|
    build_number = ""
    project = Xcodeproj::Project.open("../#{PROJECT_NAME}.xcodeproj")
    project.build_configurations.each do |build|
        build_number = build.build_settings['SHARED_BUILD_NUMBER']
    end
    build_number
  end

  lane :bump_build_number do |options|
    unless options[:iknowwhatimdoing]
      ensure_git_status_clean(show_uncommitted_changes: true)
    end

    build_number = ""

    project = Xcodeproj::Project.open("../#{PROJECT_NAME}.xcodeproj")
    project.build_configurations.each do |build|
      # Build Number
      current_build = build.build_settings['SHARED_BUILD_NUMBER'].to_i
      puts "#{build.name}: current SHARED_BUILD_NUMBER is #{current_build}"
      build_number = current_build + 1
      puts "#{build.name}: setting new SHARED_BUILD_NUMBER with #{build_number}"
      build.build_settings['SHARED_BUILD_NUMBER'] = build_number
    end
    puts "Available Targets:"
    project.targets.each do |target|
      puts " - #{target.name}"
    end
    project.save()

    puts "Build #{build_number}"
    git_commit(path: [
      "./#{PROJECT_NAME}.xcodeproj/project.pbxproj",
    ], message: "Build #{build_number}")
  end

  lane :bump_version do |options|
    unless options[:iknowwhatimdoing]
      ensure_git_status_clean(show_uncommitted_changes: true)
    end

    version_number = ""
    build_number = ""

    project = Xcodeproj::Project.open("../#{PROJECT_NAME}.xcodeproj")
    project.build_configurations.each do |build|
      # Version Number
      current_version = build.build_settings['MARKETING_VERSION']
      puts "#{build.name}: current MARKETING_VERSION is #{current_version}"

      version_array = current_version.split(".").map(&:to_i)
      case options[:bump_type]
      when "patch"
        version_array[2] = (version_array[2] ? version_array[2] : 0) + 1
      when "minor"
        version_array[1] = (version_array[1] ? version_array[1] : 0) + 1
        version_array[2] = version_array[2] = 0
      when "major"
        version_array[0] = (version_array[0] ? version_array[0] : 0) + 1
        version_array[1] = version_array[1] = 0
        version_array[1] = version_array[2] = 0
      end

      if options[:omit_zero_patch_version] && version_array[2] == 0
        version_array.pop()
      end

      version_number = version_array.join(".")
      puts "#{build.name}: setting new MARKETING_VERSION with #{version_number}"
      build.build_settings['MARKETING_VERSION'] = version_number

      # Build Number
      current_build = build.build_settings['SHARED_BUILD_NUMBER'].to_i
      puts "#{build.name}: current SHARED_BUILD_NUMBER is #{current_build}"
      build_number = current_build + 1
      puts "#{build.name}: setting new SHARED_BUILD_NUMBER with #{build_number}"
      build.build_settings['SHARED_BUILD_NUMBER'] = build_number
    end
    puts "Available Targets:"
    project.targets.each do |target|
      puts " - #{target.name}"
    end
    project.save()

    puts "Bump to v#{version_number} (#{build_number})"
    git_commit(path: [
      "./#{PROJECT_NAME}.xcodeproj/project.pbxproj",
      "./#{PROJECT_NAME}.podspec",
    ], message: "Bump to v#{version_number} (#{build_number})")
  end

  lane :release do |options|
    version_bump_podspec bump_type: options[:bump_type]
    bump_version(
        bump_type: options[:bump_type],
        iknowwhatimdoing: options[:iknowwhatimdoing]
    )
  end
end